{"version":3,"sources":["components/CounterControl/CounterControl.module.css","components/CounterOutput/CounterOutput.module.css","components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","store/actions/actions.js","App.js","serviceWorker.js","store/reducers/results.js","store/reducers/counter.js","store/reducers/root.js","index.js"],"names":["module","exports","counter-control","counter-output","counterControl","props","react_default","a","createElement","className","classes","onClick","label","counterOutput","value","Counter","_this","this","CounterOutput","counter","CounterControl","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","onStoreResult","storedResults","map","storedResult","key","id","onDeleteResult","Component","connect","state","results","dispatch","type","result","resultElementId","App","containers_Counter_Counter","Boolean","window","location","hostname","match","intialState","resultsReducer","arguments","length","undefined","action","Object","objectSpread","concat","Date","getTime","updatedArray","filter","counterReducer","rootReducer","combineReducers","store","createStore","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,kBAAA,6DCAlBF,EAAAC,QAAA,CAAkBE,iBAAA,wPCSHC,EANQ,SAACC,GAAD,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ,mBAAoBC,QAASN,EAAMM,SACxDN,EAAMO,yBCEIC,EAJO,SAACR,GAAD,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ,mBAAxB,oBAA6DL,EAAMS,QCE/DC,mLACM,IAAAC,EAAAC,KACR,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,CAAeJ,MAAOG,KAAKZ,MAAMc,UAEjCb,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,YAAYD,QAASM,KAAKZ,MAAMgB,qBACtDf,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,YAAYD,QAASM,KAAKZ,MAAMiB,qBACtDhB,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,SAASD,QAASM,KAAKZ,MAAMkB,eACnDjB,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,cAAcD,QAASM,KAAKZ,MAAMmB,oBACxDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMK,EAAKX,MAAMoB,cAAcT,EAAKX,MAAMc,WAA3D,gBAGAb,EAAAC,EAAAC,cAAA,UACGS,KAAKZ,MAAMqB,cAAcC,IAAI,SAAAC,GAC5B,OACEtB,EAAAC,EAAAC,cAAA,MACEqB,IAAKD,EAAaE,GAClBnB,QAAS,kBAAMK,EAAKX,MAAM0B,eAAeH,EAAaE,MACrDF,EAAad,kBApBRkB,aAiDPC,cAnBS,SAAAC,GACtB,MAAO,CACLf,QAASe,EAAMf,QAAQA,QACvBO,cAAeQ,EAAMC,QAAQA,UAIN,SAAAC,GACzB,MAAO,CACLf,mBAAoB,kBAAMe,EAAS,CAAEC,KC9ChB,eD+CrBf,mBAAoB,kBAAMc,EAAS,CAAEC,KC9ChB,eD+CrBd,aAAc,kBAAMa,EAAS,CAAEC,KC9ChB,MD8CuCvB,MAAO,MAC7DU,kBAAmB,kBAAMY,EAAS,CAAEC,KC9ChB,WD8C4CvB,MAAO,MAEvEW,cAAe,SAACa,GAAD,OAAYF,EAAS,CAAEC,KC/Cd,eD+C8CC,OAAQA,KAC9EP,eAAgB,SAACD,GAAD,OAAQM,EAAS,CAAEC,KC/CV,gBD+C2CE,gBAAiBT,OAI1EG,CAA6ClB,GE1C7CyB,mLARX,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,cAJUT,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEChBAC,EAAc,CAClBZ,QAAS,IA8BIa,EA3BQ,WAAiC,IAAhCd,EAAgCe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBF,EAAaK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQC,EAAOf,MACb,IHJwB,eGKtB,OAAOgB,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEC,QAASD,EAAMC,QAAQoB,OAAO,CAC5BzB,IAAI,IAAI0B,MAAOC,UACf3C,MAAOsC,EAAOd,WAGpB,IHXyB,gBGgBvB,IAAMoB,EAAexB,EAAMC,QAAQwB,OAAO,SAAArB,GACxC,OAAOA,EAAOR,KAAOsB,EAAOb,kBAE9B,OAAOc,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEC,QAASuB,IAEb,QACE,OAAOxB,IC3BPa,EAAc,CAClB5B,QAAS,GA8BIyC,EA3BQ,WAAiC,IAAhC1B,EAAgCe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBF,EAAaK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQC,EAAOf,MACb,IJRqB,YISnB,OAAOgB,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEf,QAASe,EAAMf,QAAU,IAE7B,IJZqB,YIanB,OAAOkC,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEf,QAASe,EAAMf,QAAU,IAE7B,IJhBe,MIiBb,OAAOkC,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEf,QAASe,EAAMf,QAAUiC,EAAOtC,QAEpC,IJpBoB,WIqBlB,OAAOuC,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEf,QAASe,EAAMf,QAAUiC,EAAOtC,QAEpC,QACE,OAAOoB,ICnBE2B,EALKC,YAAgB,CAClC3C,QAASyC,EACTzB,QAASa,ICGLe,EAAQC,YAAYH,GAEpBI,EACJ3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAUH,MAAOA,GACfzD,EAAAC,EAAAC,cAAC2D,EAAD,OAIJC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,SJ+GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78e46037.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter-control\":\"CounterControl_counter-control__7w32G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter-output\":\"CounterOutput_counter-output__2IrGN\"};","import React from 'react';\n\nimport classes from './CounterControl.module.css';\n\nconst counterControl = (props) => (\n  <div className={classes[\"counter-control\"]} onClick={props.onClick}>\n    {props.label}\n  </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport classes from './CounterOutput.module.css';\n\nconst counterOutput = (props) => (\n  <div className={classes[\"counter-output\"]}>Current Counter: {props.value}</div>\n);\n\nexport default counterOutput;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\nimport * as actionTypes from '../../store/actions/actions';\n\nclass Counter extends Component {\n  render () {\n    return (\n      <div>\n        <CounterOutput value={this.props.counter} />\n\n        <CounterControl label=\"Increment\" onClick={this.props.onIncrementCounter} />\n        <CounterControl label=\"Decrement\" onClick={this.props.onDecrementCounter} />\n        <CounterControl label=\"Add 10\" onClick={this.props.onAddCounter} />\n        <CounterControl label=\"Subtract 15\" onClick={this.props.onSubtractCounter} />\n        <hr />\n        <button onClick={() => this.props.onStoreResult(this.props.counter)}>\n          Store Result\n        </button>\n        <ul>\n          {this.props.storedResults.map(storedResult => {\n            return (\n              <li\n                key={storedResult.id}\n                onClick={() => this.props.onDeleteResult(storedResult.id)}>\n                {storedResult.value}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    counter: state.counter.counter,\n    storedResults: state.results.results\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter: () => dispatch({ type: actionTypes.INCREMENT }),\n    onDecrementCounter: () => dispatch({ type: actionTypes.DECREMENT }),\n    onAddCounter: () => dispatch({ type: actionTypes.ADD, value: 10 }),\n    onSubtractCounter: () => dispatch({ type: actionTypes.SUBTRACT, value: 15 }),\n\n    onStoreResult: (result) => dispatch({ type: actionTypes.STORE_RESULT, result: result }),\n    onDeleteResult: (id) => dispatch({ type: actionTypes.DELETE_RESULT, resultElementId: id })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const ADD = 'ADD';\r\nexport const SUBTRACT = 'SUBTRACT';\r\nexport const STORE_RESULT = 'STORE_RESULT';\r\nexport const DELETE_RESULT = 'DELETE_RESULT';","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actions\";\r\n\r\nconst intialState = {\r\n  results: []\r\n};\r\n\r\nconst resultsReducer = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.STORE_RESULT:\r\n      return {\r\n        ...state,\r\n        results: state.results.concat({\r\n          id: new Date().getTime(),\r\n          value: action.result\r\n        })\r\n      };\r\n    case actionTypes.DELETE_RESULT:\r\n      // const id = 2;\r\n      // const newArray = [...state.results];\r\n      // newArray.splice(id, 1);\r\n\r\n      const updatedArray = state.results.filter(result => {\r\n        return result.id !== action.resultElementId;\r\n      });\r\n      return {\r\n        ...state,\r\n        results: updatedArray\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default resultsReducer;\r\n","import * as actionTypes from \"../actions/actions\";\r\n\r\nconst intialState = {\r\n  counter: 0\r\n};\r\n\r\nconst counterReducer = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.INCREMENT:\r\n      return {\r\n        ...state,\r\n        counter: state.counter + 1\r\n      };\r\n    case actionTypes.DECREMENT:\r\n      return {\r\n        ...state,\r\n        counter: state.counter - 1\r\n      };\r\n    case actionTypes.ADD:\r\n      return {\r\n        ...state,\r\n        counter: state.counter + action.value\r\n      };\r\n    case actionTypes.SUBTRACT:\r\n      return {\r\n        ...state,\r\n        counter: state.counter - action.value\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import {combineReducers} from 'redux';\r\n\r\nimport resultsReducer from './results';\r\nimport counterReducer from './counter';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n  results: resultsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './store/reducers/root';\n\nconst store = createStore(rootReducer);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}